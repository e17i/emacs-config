* infix snippet

 #+BEGIN_SRC emacs-lisp
(defmacro infixn (op arg1 &rest args)
  `(,arg1 ,op ,@args))

(defmacro infix (&rest args)
  (list (second args) (first args) (nth 2 args)))
 #+END_SRC

* Y Combinator

#+BEGIN_SRC emacs-lisp
(defun Y (f)
  (lexical-let ((f f))
    (lambda (&rest args)
      (apply f (Y f) args))))
#+END_SRC

Trampoline:

#+BEGIN_SRC emacs-lisp
(defun Y/ (f)
  (lexical-let ((f f))
    (lambda (&rest args)
      (lexical-let ((args args))
        (lambda ()
          (apply f (Y/ f) args))))))

(defun T (f &rest args)
  (let ((result (apply (Y/ f) args)))
    (while (functionp result)
      (setq result (funcall result)))
    result))

(funcall (Y (lambda (f n a)
     (if (eq n 0) a
       (funcall f (- n 1) (+ a n))))) 4 0)

(T (lambda (f n a)
     (if (eq n 0) a
       (funcall f (- n 1) (+ a n)))) 4 0)
#+END_SRC

* recursion macro

#+BEGIN_SRC emacs-lisp
(defmacro recurse (name argvals &rest conds-and-step)
  "Here is the pinnacle and building material of recursion. NAME
defines a name for the defined recursion. ARGVALS defines the
initial state. All but the last of CONDS-AND-STEP are a list of
tuples, each one containing a condition and an expression,
usually an exit value expression designated by a call to return.
The last arg is a list of expressions, defining the next
recursion state.

A new recursion state can also be defined explicitely, using an
expression of the form (NAME vals)."
  (let ((args (mapcar #'car argvals))
        (conds (mapcar (lambda (elem)
                         `(,(car elem) (return ,(cadr elem))))
                       (butlast conds-and-step)))
        (step (car (last conds-and-step)))
        (iter (gensym)))
    `(macrolet ((,name (&rest vals)
                       `(progn
                          (psetq ,@(apply #'nconc (mapcar* #'list ',args vals)))
                          (go ,',iter)))
                (return (val)
                        `(return-from ,',name ,val)))
       (block ,name
         (let ,argvals
           (cl-tagbody
            ,iter
            (cond ,@conds)
            (,name ,@step)))))))

(recurse test ((n 5) (a 0))
         ((eq n 0) a)
         ((- n 1) (+ a n)))

(loop for i from 0 to 20 do
      (print
       (recurse fib ((n i) (f0 1) (f1 1))
                ((< n 2) f1)
                ((- n 1) f1 (+ f0 f1)))))

(loop for i from 0 to 20 do (print
 (recurse fib2 ((n i) (c (lambda (r) (return r))))
          ((< n 2) (funcall c 1))
          ((- n 2) (lexical-let ((cn n) (cc c))
                     (lambda (rl)
                       (fib2 (- cn 1) (lexical-let ((rl rl))
                                        (lambda (rr)
                                          (funcall cc (+ rl rr)))))))))))
#+END_SRC

* list comprehension

#+BEGIN_SRC emacs-lisp
(defun range (steps &optional start inc)
  (let ((inc (or inc 1)))
    (recurse range ((i 0) (n (or start 0)) (a))
             ((>= i steps) (return a))
             ((+ i 1) (+ n inc) (append a (list n))))))

(defmacro list-compr (expr for i in seq &optional if cond)
  (let ((cond (or cond 't))
        (gseq (gensym))
        (gn (gensym))
        (ga (gensym)))
    `(let ((,gseq ,seq))
       (recurse list-compr ((,gn ,gseq) (,i (car ,gseq)) (,ga))
                ((not ,gn) (return ,ga))
                ((cdr ,gn) (cadr ,gn) (if ,cond (append ,ga (list ,expr)) ,ga))))))

(list-compr (* 2 i) for i in (range 10) if (eq 0 (% i 2)))
#+END_SRC
* coroutines
* symbols

  with dynamic binding, there ins only one global level of symbols. If not
  explicitely created via ~(defvar)~ or as function arguments or in ~(let)~
  environments, each first mentioning of a symbol name creates it with
  uninitialized components.

  This means, a so called free variable in a function definition is actually
  just a reference to a symbol (existing or newly created). When the function
  is executed, there might have been a value assigned to it, or not. If not,
  the variable is said to not having been bound.

  Each invocation of a dynamic environment (via calling of a function or
  generating a ~(let)~ environment) assigns new values to the symbol variables
  (saving the old ones on a stack). Closing an environment restores the
  variables to their previous values. So there is no nested stacking of local
  environments, just one level with globally changing values.
  Depending on the currently active dynamic environment, an executed function
  accesses the current variable values of free variables.

  An example of creating and using a global symbol which is not special in a
  dynamic environment:
#+BEGIN_SRC emacs-lisp
(setf x 2)
(setf (symbol-function 'f) (let ((x 1))
         (lambda nil x)))
#+END_SRC

#+RESULTS:
| lambda | nil | x |

No closure is created and the lambda doesn't acccess the value x . 1 only in
place while defining it.

#+BEGIN_SRC emacs-lisp
(f)
#+END_SRC

#+RESULTS:
: 2

#+BEGIN_SRC emacs-lisp
(let ((x 3))
  (f))
#+END_SRC

#+RESULTS:
: 3

But it accesses the changed value of =x= in place while calling it here.

With lexical binding, both are included into the closure, showing =x= is not special:

#+BEGIN_SRC emacs-lisp
(setf lexical-binding t)
(setf (symbol-function 'f) (let ((x 1) (y 2))
                             (lambda nil x)))
#+END_SRC

#+RESULTS:
(closure
 ((y . 2)
  (x . 1)
  t)
 nil x)

Only now, =x= is marked special:

#+BEGIN_SRC emacs-lisp
(defvar x 1)
(setf (symbol-function 'f) (let ((x 1) (y 2))
                             (lambda nil x)))
#+END_SRC

#+RESULTS:
(closure
 ((y . 2)
  t)
 nil x)

Mentioning a symbol name in the source does two things. First, in the reader,
the symbol name is replaced by the actual symbol reference when constructing
the ast. Second, the symbol is dereferenced to access the variable or function
value (depending on context).

This does not work within lexical environments. Here, the variable symbol
references are only existant statically at compile time. The code generated
directly and without using a symbol object accesses the variables of the
current environment level or closure, otherwise being invisible. This is true
for all non-global lexical variable levels (ie for all variables typically
used with modern programming styles).

#+BEGIN_SRC emacs-lisp 
(unintern 'x)
(let ((x 1))
         (symbol-value 'x)
         x)
#+END_SRC

#+RESULTS:
 *** Eval error ***  Symbolâ€™s value as variable is void: x

While =x= could be accessed as variable here, the actual reference to the
symbol and the explicit dereferencing bypasses this local closure variable.
Instead, as described above, this first implicit mentioning of symbol name
='x= creates a new (global) symbol =x= with uninitialized value, which is then
accessed by the =(symbol-value)= function, finding a void value.

** Questions

   - how does this behave when compiling emacs lisp files? Which behaviour
     does change?
   - how can I activate lexical-binding in org source blocks?
   - mentioning of a symbol is typically translated into =(symbol-value
     'symbol)=. In lexical environments, there are no runtime symbol objects.
     So there, the symbol name resolution is resolved in a different way. How?
     Can that also be made explicit?

** Todos

   - Section about when and when not quoting symbols
     - symbols are dereferenced exactly once, not as often as possible
   - in cl, #' is replaced by (function ...), just as ' by (quote ...)
   - section about generalized variables and their api
   - further investigate gensym in the light of lessons learned
   - function is like quote, but can byte-compile it's argument
   - a simple list can be put into the function cell of a symbol and thus be
     called as a real function using that symbol. So a list can be executed
     without using funcall or apply. This way, a dynamic runtime
     macro expansion facility could be implemented.

#+BEGIN_SRC emacs-lisp
(defvar x 1)
(setf (symbol-function 'testfnc)
    (let ((sym (gensym)))
    (setf (symbol-value sym) x)
         (list 'lambda '(&rest rest)
               (list 'apply
                     (list 'function
                           #'(lambda (invisible_closure_arg)
                               (symbol-value invisible_closure_arg)))
                     (list 'quote sym)
                     'rest))))
#+END_SRC

#+RESULTS:
| lambda | (&rest rest) | (apply #'(lambda (invisible_closure_arg) (symbol-value invisible_closure_arg)) 'g5 rest) |

This just builds and returns a list containing symbols like 'lambda and in one
of the last cells the unnamed symbol created with gensym. This list is then
interpreted as a lambda function containing a closure. What happens when
compiling it?

#+BEGIN_SRC emacs-lisp
(let ((x 3))
         (testfnc))
#+END_SRC

#+RESULTS:
: 1

